import{j as C,r as x}from"./framer-motion-B4_CJGXS.js";import{R as F,F as z}from"./radix-ui-C_8bfTb2.js";import{b as D,a as U,d as t}from"./index-DvEJBdLQ.js";import{e as b,d as v,q as m,f as u,w as n,h as p,u as I,j as B}from"./firebase-CKBzFk3f.js";function M({className:w,...d}){return C.jsx(F,{"data-slot":"avatar",className:D("relative flex size-8 shrink-0 overflow-hidden rounded-full",w),...d})}function O({className:w,...d}){return C.jsx(z,{"data-slot":"avatar-fallback",className:D("bg-muted flex size-full items-center justify-center rounded-full",w),...d})}function Q(){const[w,d]=x.useState([]),[g,R]=x.useState(),[S,h]=x.useState(!0),[j,P]=x.useState(null);return x.useEffect(()=>{(async()=>{var e;const s=U.currentUser;if(!s){h(!1);return}try{h(!0),P(null);const o=await b(v(t,"users",s.uid));o.exists()&&R((e=o.data())==null?void 0:e.pin);const f=m(u(t,"connections"),n("user1","==",s.uid),n("status","==","accepted")),a=m(u(t,"connections"),n("user2","==",s.uid),n("status","==","accepted")),[r,y]=await Promise.all([p(f),p(a)]),N=[...r.docs,...y.docs].map(A=>{const i=A.data(),l=i.user1===s.uid;return{uid:l?i.user2:i.user1,name:l?i.user2Name:i.user1Name,relation:l?i.user1Relation:i.user2Relation}});d(N)}catch(o){console.error("Error al cargar conexiones:",o),P("Error al cargar conexiones")}finally{h(!1)}})()},[]),{connections:w,pin:g,loading:S,error:j,addConnection:async(c,s)=>{const e=U.currentUser;if(!e||!c.trim())throw new Error("Usuario no autenticado o PIN vacío");try{const o=m(u(t,"users"),n("pin","==",c)),f=await p(o);if(f.empty)throw new Error("PIN no encontrado");const a=f.docs[0],r=a.data();if(a.id===e.uid)throw new Error("No puedes conectarte contigo mismo");const y=m(u(t,"connections"),n("user1","==",e.uid),n("user2","==",a.id)),E=m(u(t,"connections"),n("user1","==",a.id),n("user2","==",e.uid)),[N,A]=await Promise.all([p(y),p(E)]);if(!N.empty||!A.empty)throw new Error("Ya tienes una conexión con este usuario");const l=(await b(v(t,"users",e.uid))).data(),k={user1:e.uid,user2:a.id,user1Name:(l==null?void 0:l.displayName)||"Usuario",user2Name:(r==null?void 0:r.displayName)||"Usuario",user1Relation:s,user2Relation:s,status:"accepted",createdAt:Date.now(),updatedAt:Date.now(),createdBy:e.uid};return await B(u(t,"connections"),k),d(q=>[...q,{uid:a.id,name:(r==null?void 0:r.displayName)||"Usuario",relation:s}]),{success:!0}}catch(o){throw console.error("Error al agregar conexión:",o),o}},removeConnection:async c=>{const s=U.currentUser;if(!s)throw new Error("Usuario no autenticado");try{const e=m(u(t,"connections"),n("user1","==",s.uid),n("user2","==",c)),o=m(u(t,"connections"),n("user1","==",c),n("user2","==",s.uid)),[f,a]=await Promise.all([p(e),p(o)]),r=f.docs[0]||a.docs[0];if(!r)throw new Error("Conexión no encontrada");return await I(v(t,"connections",r.id),{status:"blocked",updatedAt:Date.now()}),d(y=>y.filter(E=>E.uid!==c)),{success:!0}}catch(e){throw console.error("Error al eliminar conexión:",e),e}},copyPin:async()=>{if(g)try{return await navigator.clipboard.writeText(g),!0}catch(c){return console.error("Error al copiar PIN:",c),!1}return!1}}}export{M as A,O as a,Q as u};
